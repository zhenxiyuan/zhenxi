#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import traceback
from asyncio import exceptions

import requests
from telethon import Button, events

from .. import BOT, BOT_DIR, chat_id, CONFIG_DIR, jdbot, logger, OWN_DIR, SCRIPTS_DIR
from ..bot.utils import backup_file, execute, press_event, row, rwcon, split_list, TASK_CMD, V4
from ..diy.utils import mycronup


@jdbot.on(events.NewMessage(chats=chat_id, from_users=chat_id, pattern=r'^https?://.*(js|py|sh)$'))
async def mydownload(event):
    try:
        SENDER = event.sender_id
        furl = event.raw_text
        if '‰∏ãËΩΩ‰ª£ÁêÜ' in BOT.keys() and str(BOT['‰∏ãËΩΩ‰ª£ÁêÜ']).lower() != 'false' and 'github' in furl:
            furl = f'{str(BOT["‰∏ãËΩΩ‰ª£ÁêÜ"])}/{furl}'
        try:
            resp = requests.get(furl).text
            if "</html>" in resp:
                await jdbot.send_message(chat_id, f"Êé•Êî∂Âà∞ÁöÑ[ÈìæÊé•]({furl})ÊòØ‰∏Ä‰∏™È°µÈù¢Âπ∂ÈùûrawÊï∞ÊçÆÔºå‰ºöËØùÁªìÊùü")
                return
        except Exception as e:
            await jdbot.send_message(chat_id, f"‰∏ãËΩΩÂ§±Ë¥•\n{e}")
            return
        async with jdbot.conversation(SENDER, timeout=60) as conv:
            fname = furl.split('/')[-1]
            fname_cn = ''
            if furl.endswith(".js") or furl.endswith(".py"):
                fname_cn = re.findall(r"new\sEnv\(\'(.*)'\)", resp, re.M)
                fname_cn = fname_cn[0] if fname_cn else ''
            if V4:
                btns = [Button.inline('ÊîæÂÖ•configÁõÆÂΩï', data=CONFIG_DIR), Button.inline('ÊîæÂÖ•jbot/diyÁõÆÂΩï', data=f'{BOT_DIR}/diy'), Button.inline('ÊîæÂÖ•scriptsÁõÆÂΩï', data=SCRIPTS_DIR), Button.inline('ÊîæÂÖ•ownÁõÆÂΩï', data=OWN_DIR), Button.inline('ÂèñÊ∂àÂØπËØù', data='cancel')]
            else:
                btns = [Button.inline('ÊîæÂÖ•configÁõÆÂΩï', data=CONFIG_DIR), Button.inline('ÊîæÂÖ•scriptsÁõÆÂΩï', data=SCRIPTS_DIR), Button.inline('ÂèñÊ∂àÂØπËØù', data='cancel')]
            cmdtext = None
            msg = await conv.send_message(f'ÊàêÂäü‰∏ãËΩΩ{fname_cn}ËÑöÊú¨\nÁé∞Âú®ÔºåËØ∑ÂÅöÂá∫‰Ω†ÁöÑÈÄâÊã©Ôºö', buttons=split_list(btns, row))
            convdata = await conv.wait_event(press_event(SENDER))
            res1 = bytes.decode(convdata.data)
            if res1 == 'cancel':
                await jdbot.edit_message(msg, 'ÂØπËØùÂ∑≤ÂèñÊ∂àÔºåÊÑüË∞¢‰Ω†ÁöÑ‰ΩøÁî®')
                conv.cancel()
                return
            elif res1 == SCRIPTS_DIR:
                fpath = f"{SCRIPTS_DIR}/{fname}"
                btns = [Button.inline("ÊòØ", data="confirm"), Button.inline("Âê¶", data="cancel")]
                msg = await jdbot.edit_message(msg, f"ËØ∑ÈóÆÈúÄË¶ÅËøêË°å{fname_cn}ËÑöÊú¨ÂêóÔºü", buttons=btns)
                convdata = await conv.wait_event(press_event(SENDER))
                res2 = bytes.decode(convdata.data)
                if res2 == "confirm":
                    cmdtext = f'{TASK_CMD} {SCRIPTS_DIR}/{fname} now'
                msg = await jdbot.edit_message(msg, f"ËØ∑ÈóÆÈúÄË¶ÅÊ∑ªÂä†ÂÆöÊó∂ÂêóÔºü", buttons=btns)
                convdata = await conv.wait_event(press_event(SENDER))
                res2 = bytes.decode(convdata.data)
                if res2 == 'cancel':
                    info = f"{fname_cn}ËÑöÊú¨Â∞Ü‰øùÂ≠òÂà∞{SCRIPTS_DIR}ÁõÆÂΩï"
                else:
                    msg, info = await mycronup(jdbot, conv, resp, fname, msg, SENDER, btns, SCRIPTS_DIR)
            elif res1 == OWN_DIR:
                fpath = f"{OWN_DIR}/raw/{fname}"
                btns = [Button.inline("ÊòØ", data="confirm"), Button.inline("Âê¶", data="cancel")]
                msg = await jdbot.edit_message(msg, f"ËØ∑ÈóÆÈúÄË¶ÅËøêË°å{fname_cn}ËÑöÊú¨ÂêóÔºü", buttons=btns)
                convdata = await conv.wait_event(press_event(SENDER))
                res2 = bytes.decode(convdata.data)
                if res2 == "confirm":
                    cmdtext = f'{TASK_CMD} {fpath} now'
                    info = f"Êñá‰ª∂Â∞Ü‰øùÂ≠òÂà∞{res1}ÁõÆÂΩïÔºå‰∏îÂ∑≤ÂÜôÂÖ•ÈÖçÁΩÆ‰∏≠ÔºåÂáÜÂ§áÊâßË°åËÑöÊú¨"
                else:
                    info = f'Êñá‰ª∂Â∞Ü‰øùÂ≠òÂà∞{res1}ÁõÆÂΩïÔºå‰∏îÂ∑≤ÂÜôÂÖ•ÈÖçÁΩÆ‰∏≠ÔºåÂáÜÂ§áÊãâÂèñÂçï‰∏™ËÑöÊú¨ÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ'
                configs = rwcon("list")
                for config in configs:
                    if "OwnRawFile" in config and "##" not in config:
                        line = configs.index(config) + 1
                        configs.insert(line, f"\t{event.raw_text}\n")
                        rwcon(configs)
                        break
                    elif config.find("Á¨¨‰∫îÂå∫Âüü") != -1:
                        break
                os.system('jup own')
            else:
                fpath = f"{res1}/{fname}"
                info = f"Êñá‰ª∂Â∞Ü‰øùÂ≠òÂà∞{res1}ÁõÆÂΩï"
            backup_file(fpath)
            with open(fpath, 'w+', encoding='utf-8') as f:
                f.write(resp)
            conv.cancel()
        if cmdtext:
            await execute(msg, info, cmdtext)
    except exceptions.TimeoutError:
        await jdbot.edit_message(msg, 'ÈÄâÊã©Â∑≤Ë∂ÖÊó∂ÔºåÂØπËØùÂ∑≤ÂÅúÊ≠¢ÔºåÊÑüË∞¢‰Ω†ÁöÑ‰ΩøÁî®')
    except Exception as e:
        title = "„Äêüí•ÈîôËØØüí•„Äë"
        name = "Êñá‰ª∂ÂêçÔºö" + os.path.split(__file__)[-1].split(".")[0]
        function = "ÂáΩÊï∞ÂêçÔºö" + e.__traceback__.tb_frame.f_code.co_name
        details = "ÈîôËØØËØ¶ÊÉÖÔºöÁ¨¨ " + str(e.__traceback__.tb_lineno) + " Ë°å"
        tip = 'Âª∫ËÆÆÁôæÂ∫¶/Ë∞∑Ê≠åËøõË°åÊü•ËØ¢'
        await jdbot.send_message(chat_id, f"{title}\n\n{name}\n{function}\nÈîôËØØÂéüÂõ†Ôºö{str(e)}\n{details}\n{traceback.format_exc()}\n{tip}")
        logger.error(f"ÈîôËØØ--->{str(e)}")
